{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifFrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputrValue","onSubmit","e","preventDefault","trim","length","categories","className","type","placeholder","value","onChange","target","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifInfo","map","img","id","title","images","downsized_medium","GifGridItem","style","width","src","alt","GifFrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","role","gif","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"sMAuCeA,G,KAjCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEAC,mBAAS,IAFT,mBAE9BC,EAF8B,KAElBC,EAFkB,KAgBrC,OACI,0BAAMC,SATW,SAAEC,GACnBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAU,MAAI,CAAEP,MAC/BC,EAAe,OAMf,2BACIO,UAAU,eACVC,KAAK,OACLC,YAAY,oBACZC,MAAQX,EACRY,SAnBc,SAAET,GACxBF,EAAgBE,EAAEU,OAAOF,a,uBCXpBG,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACZC,EADY,iDACqCC,UAAUH,GAD/C,sDAECI,MAAMF,GAFP,cAEZG,EAFY,gBAGGA,EAAKC,OAHR,uBAGXC,EAHW,EAGXA,KAEDC,EAAUD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATxB,kBAaXM,GAbW,4CAAH,sDCGNO,EAAc,SAAC,GAA0B,IAAvBJ,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IACtC,OACI,yBAAKT,UAAU,qDAAqDuB,MAAO,CAACC,MAAO,UAC/E,yBAAKC,IAAMhB,EAAMiB,IAAMP,EAAQnB,UAAU,iBACzC,yBAAKA,UAAU,aACf,wBAAIA,UAAU,cAAd,IAA8BmB,EAA9B,KACA,wBAAInB,UAAU,iCAAd,QAAqDkB,EAArD,QCFCS,EAAU,SAAC,GAAgB,IAAfpB,EAAc,EAAdA,SAAc,ECHX,SAAEA,GAAe,IAAD,EAEdhB,mBAAS,CAC/BuB,KAAM,GACNc,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAiBxC,OAVAC,qBAAW,WACPzB,EAAOC,GACFyB,MAAK,SAAAC,GACFH,EAAS,CACLhB,KAAMmB,EACNL,SAAS,SAGtB,CAACrB,IAEGsB,EDX0BK,CAAc3B,GAAlCa,EAHsB,EAG3BN,KAAac,EAHc,EAGdA,QAIrB,OACI,oCACA,4BAAKrB,GAGDqB,GAGA,yBAAK5B,UAAU,kEACX,yBAAKA,UAAU,iBAAiBmC,KAAK,UACjC,0BAAMnC,UAAU,WAAhB,gBAIZ,yBAAKA,UAAU,gBAEPoB,EAAOJ,KAAI,SAAAoB,GAAG,OACV,kBAAC,EAAD,eACIC,IAAMD,EAAIlB,IACNkB,UEIbE,EAhCM,WAAM,MAGa/C,mBAAU,CAAC,cAHxB,mBAGhBQ,EAHgB,KAGJT,EAHI,KASvB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BACA,4BAEQS,EAAWiB,KAAK,SAAAT,GAAQ,OACpB,kBAAC,EAAD,CACI8B,IAAK9B,EACLA,SAAWA,U,MCRvCgC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.6a1e165e.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nconst AddCategory = ({setCategories}) => {//1 recibimos el metodo mediante los props\r\n\r\n    const [inputValue, setInputrValue] = useState('');\r\n\r\n    const handleInputChange = ( e ) =>{\r\n        setInputrValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = ( e ) => {\r\n        e.preventDefault();\r\n        if(inputValue.trim().length > 2 ) {\r\n            setCategories( categories => [ inputValue ]); //2 llamamos al metodo. [variable => [...variable, valorañadido]] variable es el estado anterior del componente\r\n            setInputrValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                className=\"form-control\" \r\n                type=\"text\" \r\n                placeholder=\"Ingresa categoria\" \r\n                value={ inputValue } \r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\nexport default AddCategory;","export const getGif = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&api_key=NiEeCjvs9SWVHvL8DPScewOAJD6LoVeD`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifInfo = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    \r\n    return gifInfo;\r\n}","import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nexport const GifGridItem = ( { id, title, url } ) => {\r\n    return (\r\n        <div className=\"card my-3 animate__animated animate__fadeInDownBig\" style={{width: \"18rem\"}}>\r\n            <img src={ url } alt={ title } className=\"card-img-top\" />\r\n            <div className=\"card-body\">\r\n            <h5 className=\"card-title\"> { title } </h5>\r\n            <h6 className=\"card-subtitle mb-2 text-muted\"> id: { id } </h6>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nexport const GifFrid = ({category}) => {\r\n\r\n    //peticiones http\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n    //getGif();\r\n\r\n    return (\r\n        <>\r\n        <h3>{category}</h3>        \r\n        { \r\n        /* Elemento loading */\r\n            loading //si está cargando\r\n            && //haz\r\n            //esto\r\n            <div className=\"d-flex justify-content-center animate__animated animate__flash\">\r\n                <div className=\"spinner-border\" role=\"status\">\r\n                    <span className=\"sr-only\">Loading...</span>\r\n                </div>         \r\n            </div>\r\n        }    \r\n        <div className=\"card-columns\">\r\n            {\r\n                images.map(gif =>(\r\n                    <GifGridItem\r\n                        key={ gif.id } \r\n                        {...gif}\r\n                    />\r\n                ))\r\n            }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGif } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGif(category)\r\n            .then(imgs => {\r\n                setstate({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            });\r\n    }, [category])//el segundo parametro nos ayuda a que el contenido dentro useEffect solo se ejecute la primera vez que es renderizado\r\n\r\n    return state;\r\n}","import React, { useState } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport  AddCategory  from './components/AddCategory';\r\nimport { GifFrid } from './components/GifFrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    //const categories = ['Star Wars', 'Harry Potter', 'Lord of the rings']; //esta manera no es recomendada\r\n    const [categories, setCategories] = useState( ['Star Wars'] );\r\n\r\n    //const handleAdd = () =>{\r\n      //  setCategories( antiguoEstado => [...antiguoEstado, 'Robocop']); //extraemos la información del estado anterior y le agregamos el nuevo, ver operador spread\r\n    //}\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr />\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        <GifFrid \r\n                            key={category}\r\n                            category={ category }\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n\r\n            \r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;","//default imports\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n//components imports\nimport GiftExpertApp from './GifExpertApp';\n\n//bootstrap4 imports\nimport 'bootstrap/dist/css/bootstrap.min.css';\n//import $ from 'jquery'\n//import Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\n\n\nReactDOM.render(\n    <GiftExpertApp />,\n  document.getElementById('root')\n);\n\n// "],"sourceRoot":""}